############################################################
# Update the cache on the main branch on push event
# Support also manual execution
# The cache will be created for release and debug.
#
# The Github action cache is per branch but a branch can access cache for
# it's branch, it's base branch  or the main branche.
#
# Workflow runs cannot restore caches created for child branches or sibling branches.
#
# This workflow make sure to also have a valid cache on the main branch so
# others branch can restore this cache.
#
# * Executing this workflow cancel running execution of this workflow.
#
# See : https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows
# See : https://stackoverflow.com/questions/69365200/github-actions-how-to-cache-dependencies-between-workflow-runs-of-different-bra
# See : https://medium.com/@everton.spader/how-to-cache-package-dependencies-between-branches-with-github-actions-e6a19f33783a
#
############################################################
name: update-branch-cache
run-name: "[Update cache] ${{ github.ref }}"

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-cache:
    name: Build Cache
    runs-on: ${{ matrix.os }}
    strategy:
        matrix:
          os: [ubuntu-22.04, ubuntu-24.04, windows-2022, macos-13, macos-14, macos-15]
          include:
            - os: ubuntu-22.04
              cc:  gcc
              cxx: g++
            - os: ubuntu-24.04
              cc:  gcc
              cxx: g++
            - os: windows-2022
              cc:  cl.exe
              cxx: cl.exe
            - os: macos-13
              cc:  clang
              cxx: clang++
            - os: macos-14
              cc:  clang
              cxx: clang++
            - os: macos-15
              cc:  clang
              cxx: clang++


        # if one job in the matrix fail, don't cancel other jobs inthe matrix
        fail-fast: false
    steps:
      - if: ${{ startsWith(matrix.os, 'ubuntu') }}
        name: Install libltdl-dev
        # required for SDL2 dependency
        # Fix configure.ac:60: error: possibly undefined macro: LT_SYS_SYMBOL_USCORE
        run: sudo apt-get install libltdl-dev

      # Clone the repo
      - uses: actions/checkout@v4
        with:
            submodules: true
            fetch-depth: 0

      - if: ${{ startsWith(matrix.os, 'macos') }}
        # Osx does not have Ninja installed.
        # CMake should used make but vcpkg fail to build on macos-14 and macos-15
        # beacause cmake can√®t find Ninja....
        name: Installing ninja
        run: |
            brew install ninja
            ninja --version

      # Setup vcpkg: ensures vcpkg is downloaded and built.
      # This will also run vcpkg
      - name: Setup a new (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11
        id: runvcpkg
        env:
          VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg_installed
        with:
          runVcpkgInstall: true

      - uses: seanmiddleditch/gha-setup-ninja@master
      - run : which ninja
      - run : ninja --version

      - name: Prints output of run-vcpkg's action.
        run: |
            echo root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}'
            echo triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}'

      - name: Prints output of run-vcpkg's action.
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

      - run : which ninja
      - run : ninja --version

      - name: which ninja
        run : which ninja

      - name: Running cmake configure ...
        shell: bash
        run: |
          base='${{ github.workspace }}'
          base=""${base//\\//}""

          export CC=${{ matrix.cc }}
          export CXX=${{ matrix.cxx }}
          cmake -S . -B ./build \
          -G Ninja \
          -DCMAKE_MODULE_PATH=$base/vcpkg_installed/${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }} \
          -DCMAKE_PREFIX_PATH=$base/vcpkg_installed/${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}

      - name: Running cmake build ...
        run: cmake --build ./build

      - name: Running tests ...
        run: ctest --test-dir ./build

      - name: Running cmake install ...
        run: cmake --install ./build --prefix ./install
